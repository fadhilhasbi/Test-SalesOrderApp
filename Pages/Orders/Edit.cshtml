@page
@model SalesOrderApp.Pages.Orders.Edit
@{
@* ViewData["Title"] = "Edit"; *@
ViewData["Title"] = Model.Order.SO_ORDER_ID == 0 ? "Add New - Sales Order" : "Edit - Sales Order";
}
@if (ViewData["SuccessMessage"] != null)
{
<div class="alert alert-success">
    @ViewData["SuccessMessage"]
</div>
}

<h1>@ViewData["Title"]</h1>

<div>
    <form method="post">
        <input type="hidden" asp-for="Order.SO_ORDER_ID" />

        <div class="row mb-3">
            <div class="col-md-6">
                <label asp-for="Order.ORDER_NO" class="form-label">Sales Order Number *</label>
                <input asp-for="Order.ORDER_NO" class="form-control" />
                <span asp-validation-for="Order.ORDER_NO" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <label asp-for="Order.ORDER_DATE" class="form-label">Order Date *</label>
                <input type="date" asp-for="Order.ORDER_DATE" class="form-control" />
                <span asp-validation-for="Order.ORDER_DATE" class="text-danger"></span>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label asp-for="Order.COM_CUSTOMER_ID" class="form-label">Customer *</label>
                <select asp-for="Order.COM_CUSTOMER_ID" class="form-select"
                    asp-items="@(new SelectList(Model.Customers, "COM_CUSTOMER_ID", "CUSTOMER_NAME" ))">
                    <option value="">Select One</option>
                </select>
                <span asp-validation-for="Order.COM_CUSTOMER_ID" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <label asp-for="Order.ADDRESS" class="form-label">Address</label>
                <input asp-for="Order.ADDRESS" class="form-control" />
                <span asp-validation-for="Order.ADDRESS" class="text-danger"></span>
            </div>
        </div>

        <hr />

        <h4>Detail Item Information</h4>

        <button type="submit" asp-page-handler="AddItem" class="btn btn-primary mb-3">Add Item</button>

        <table class="table">
            <thead>
                <tr>
                    <th>No</th>
                    <th>Action</th>
                    <th>Item Name</th>
                    <th>QTY</th>
                    <th>Price</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.Items.Count; i++) { <tr>
                    <td>@(i + 1)</td>
                    <td>
                        <button type="submit" asp-page-handler="RemoveItem" asp-route-index="@i"
                            class="btn btn-sm btn-danger">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                    <td>
                        <input asp-for="@Model.Items[i].ITEM_NAME" class="form-control" />
                        <span asp-validation-for="@Model.Items[i].ITEM_NAME" class="text-danger"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.Items[i].QUANTITY" class="form-control" onchange="calculateTotal(this)"
                            oninput="calculateTotal(this)" />
                        <span asp-validation-for="@Model.Items[i].QUANTITY" class="text-danger"></span>
                    </td>
                    <td>
                        <input asp-for="@Model.Items[i].PRICE" class="form-control" onchange="calculateTotal(this)"
                            oninput="calculateTotal(this)" />
                        <span asp-validation-for="@Model.Items[i].PRICE" class="text-danger"></span>
                    </td>
                    <td>
                        <input type="text" class="form-control total-price" value="@string.Format(" {0:C}",
                            Model.Items[i].QUANTITY * Model.Items[i].PRICE)" readonly />
                    </td>
                    </tr>
                    }
            </tbody>
        </table>

        <div class="row mb-3">
            <div class="col-md-6">
                <h5>Total Item: <span id="totalItem">@Model.Items.Count</span></h5>
            </div>
            <div class="col-md-6">
                <h5>Total Amount: <span id="totalAmount">@string.Format("{0:C}", Model.Items.Sum(i => i.QUANTITY *
                        i.PRICE))</span></h5>
            </div>
        </div>

        <div class="row">
            <div class="col text-end">
                <button type="submit" asp-page-handler="Save" class="btn btn-primary">Save</button>
                <a asp-page="Index" class="btn btn-secondary">Close</a>
            </div>
        </div>
    </form>
</div>

@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Format all totals on page load
        formatAllTotals();
        updateTotals();

        // Handle success/error messages from query parameters
        const urlParams = new URLSearchParams(window.location.search);
        const success = urlParams.get('success');
        const error = urlParams.get('error');

        if (success === 'true') {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Order saved successfully.',
                timer: 2000,
                showConfirmButton: false
            });
        } else if (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error
            });
        }
    });

    function formatRupiah(amount) {
        return new Intl.NumberFormat('id-ID', {
            style: 'currency',
            currency: 'IDR',
            minimumFractionDigits: 2
        }).format(amount);
    }

    function parseRupiah(rupiah) {
        return parseFloat(rupiah.replace(/[^\d]/g, '')) || 0;
    }

    function formatAllTotals() {
        document.querySelectorAll('tbody tr').forEach(row => {
            const quantity = parseFloat(row.querySelector('input[name*="QUANTITY"]').value) || 0;
            const price = parseFloat(row.querySelector('input[name*="PRICE"]').value) || 0;
            const total = quantity * price;
            row.querySelector('.total-price').value = formatRupiah(total);
        });
    }

    function calculateTotal(input) {
        const row = input.closest('tr');
        const quantityInput = row.querySelector('input[name*="QUANTITY"]');
        const priceInput = row.querySelector('input[name*="PRICE"]');
        const totalInput = row.querySelector('.total-price');

        // Get raw numeric values
        const quantity = parseFloat(quantityInput.value) || 0;
        const price = parseFloat(priceInput.value) || 0;
        const total = quantity * price;

        // Update the hidden field with raw value (if you have one)
        // Then format the display value
        totalInput.value = formatRupiah(total);

        updateTotals();
    }

    function updateTotals() {
        // Update total item count
        const itemCount = document.querySelectorAll('tbody tr').length;
        document.getElementById('totalItem').textContent = itemCount;

        // Calculate total amount
        let totalAmount = 0;
        document.querySelectorAll('tbody tr').forEach(row => {
            const quantity = parseFloat(row.querySelector('input[name*="QUANTITY"]').value) || 0;
            const price = parseFloat(row.querySelector('input[name*="PRICE"]').value) || 0;
            totalAmount += quantity * price;
        });

        document.getElementById('totalAmount').textContent = formatRupiah(totalAmount);
    }

    document.querySelectorAll('input[name*="QUANTITY"], input[name*="PRICE"]').forEach(input => {
        input.addEventListener('change', function () {
            calculateTotal(this);
        });
        input.addEventListener('input', function () {
            calculateTotal(this);
        });
    });
</script>
}